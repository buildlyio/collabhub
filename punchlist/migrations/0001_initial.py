# Generated by Django 3.2.25 on 2024-07-30 17:06

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AcceptedPunchlist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(auto_now_add=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accepted_bounties_owned', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DevelopmentAgency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agency_name', models.CharField(max_length=255, unique=True)),
                ('agency_type', models.CharField(blank=True, choices=[('Marketing', 'Marketing'), ('Software Development', 'Software Development'), ('Finance', 'Finance'), ('Investment Fund', 'Investment Fund'), ('Legal', 'Legal'), ('Accounting/Taxes', 'Accounting/Taxes'), ('Accelerator/Incubator', 'Accelerator/Incubator')], max_length=255, null=True)),
                ('team_size', models.PositiveIntegerField(help_text='How many employees in your organization')),
                ('skills', models.TextField(blank=True, help_text='If your a service, list the skills your team uses to complete the service', null=True)),
                ('background', models.TextField(help_text='How long have you been in business, where are you based details to help startups know who you are.')),
                ('hourly_rate', models.DecimalField(decimal_places=2, max_digits=8)),
                ('project_rate', models.DecimalField(decimal_places=2, max_digits=10)),
                ('industries_worked', models.CharField(choices=[('Technology', 'Technology'), ('Finance', 'Finance'), ('Healthcare', 'Healthcare'), ('Government', 'Government'), ('Non/Profit-NGO', 'Non/Profit-NGO'), ('Manufacturing', 'Manufacturing'), ('Agriculture', 'Agriculture'), ('Climate Tech', 'Climate Tech')], help_text='Primary Industries you serve or have worked with', max_length=255)),
                ('github_repository', models.URLField(blank=True, null=True)),
                ('client_reviews', models.TextField(blank=True, help_text="Profile Links to Clutch, Capterra, G2 Crowd, and GoodFirms: Links to the company's profiles on these review platforms.", max_length=255, null=True)),
                ('contact_name', models.CharField(max_length=255)),
                ('contact_email', models.EmailField(max_length=254)),
                ('contact_phone', models.CharField(max_length=20)),
                ('linkedin_url', models.URLField(blank=True, null=True)),
                ('how_they_found_us', models.TextField()),
                ('logo', models.ImageField(blank=True, null=True, upload_to='agency-logo')),
            ],
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('product_info', models.TextField()),
                ('product_uuid', models.UUIDField(unique=True)),
                ('organization_uuid', models.UUIDField()),
                ('product_team', models.UUIDField()),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('create_date', models.DateTimeField()),
                ('edit_date', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Punchlist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='Name your punchlist, i.e. Fix Registration Error', max_length=255)),
                ('catagory', models.CharField(blank=True, choices=[('Bug', 'Bug'), ('Feature', 'Feature'), ('Puchlist', 'Punchlist'), ('Release', 'Release')], help_text="If it is new or it works but you want to change it somehow it's a feature, otherwise it's a bug.  A Punchlist is a list of bug in a release, and a release is collection of bugs and features", max_length=255)),
                ('skills', models.CharField(blank=True, help_text='Skills Required to Fix your Issue', max_length=255)),
                ('level', models.CharField(blank=True, choices=[('Intern', 'Intern'), ('Junior', 'Junior'), ('Midlevel', 'Mid-Level'), ('Senior', 'Senior'), ('CTO', 'CTO')], help_text='Skill level - Select One', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Describe in detail the issue of person you are looking for')),
                ('certification', models.TextField(blank=True, help_text='Certifications required if any')),
                ('brief', models.FileField(blank=True, help_text='Document Upload', null=True, upload_to='')),
                ('amount', models.CharField(blank=True, choices=[('Small', '$25'), ('Medium', '$40'), ('Large', '$75'), ('XL', '$100'), ('XXL', '$200')], help_text='How Much in USD to get the work done.', max_length=255)),
                ('issue_id', models.CharField(blank=True, help_text='GitHub ID', max_length=255, null=True)),
                ('complexity_estimate', models.CharField(blank=True, choices=[('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High'), ('Extreme', 'Extreme')], help_text='Difficult or Easy or not sure', max_length=255, null=True)),
                ('url', models.CharField(blank=True, help_text='Your GitHub Repository URL', max_length=255, null=True)),
                ('status', models.CharField(blank=True, choices=[('Draft', 'Draft'), ('Planned', 'Planned'), ('Started', 'Started'), ('Found', 'Found'), ('CANCELED', 'CANCELED')], default='DRAFT', help_text='Acitivate the Hunt', max_length=255)),
                ('repo_owner', models.CharField(help_text='Github Organization Name', max_length=100)),
                ('repo', models.CharField(help_text='GitHub Repository i.e. myorg/myrepo', max_length=100)),
                ('repo_access_token', models.CharField(help_text='Learn how to get your GitHub Token here https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens', max_length=100)),
                ('tags', models.CharField(blank=True, help_text='Comma Seperated Tags', max_length=255)),
                ('hosting', models.CharField(blank=True, help_text='Hosting provider if known', max_length=255)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PunchlistSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_url', models.URLField()),
                ('notes', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('punchlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='punchlist.punchlist')),
                ('punchlist_hunter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PunchlistSetter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PunchlistHunter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approved', models.BooleanField(default=False)),
                ('github_profile', models.URLField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=255)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_paid', models.BooleanField(default=False)),
                ('plan', models.CharField(blank=True, max_length=255)),
                ('expriation_date', models.DateTimeField(blank=True, null=True)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
                ('punchlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='punchlist.punchlist')),
            ],
        ),
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='None', max_length=200)),
                ('description', models.TextField(default='None')),
                ('issue_number', models.CharField(blank=True, max_length=200, null=True)),
                ('issue_url', models.CharField(blank=True, max_length=500, null=True)),
                ('priority', models.IntegerField(default=1)),
                ('complexity_estimate', models.IntegerField(default=1)),
                ('language', models.CharField(blank=True, max_length=50, null=True)),
                ('framework', models.CharField(blank=True, max_length=50, null=True)),
                ('hosting_environment', models.CharField(blank=True, max_length=100, null=True)),
                ('screenshot', models.ImageField(blank=True, null=True, upload_to='bug_screenshots')),
                ('tags', models.CharField(blank=True, max_length=100, null=True)),
                ('is_fixed', models.BooleanField(default=False)),
                ('is_tracked', models.BooleanField(default=False)),
                ('tracked_url', models.URLField(blank=True)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
                ('punchlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='punchlist.punchlist')),
            ],
        ),
        migrations.CreateModel(
            name='InsightsUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insightsuser_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('insightsorganization_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner_signature', models.ImageField(blank=True, null=True, upload_to='contracts')),
                ('punchlist_hunter_signature', models.ImageField(blank=True, null=True, upload_to='contracts')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(validators=[django.core.validators.MinValueValidator(limit_value=django.db.models.expressions.CombinedExpression(django.db.models.expressions.F('start_date'), '+', django.db.models.expressions.Value(datetime.timedelta(days=30)))), django.core.validators.MaxValueValidator(limit_value=django.db.models.expressions.CombinedExpression(django.db.models.expressions.F('start_date'), '+', django.db.models.expressions.Value(datetime.timedelta(days=365))))])),
                ('accepted_punchlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='punchlist.acceptedpunchlist')),
                ('punchlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='punchlist.punchlist')),
            ],
        ),
        migrations.CreateModel(
            name='Bug',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField()),
                ('notes', models.TextField(blank=True)),
                ('error_message', models.TextField(blank=True)),
                ('severity', models.CharField(choices=[('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High')], max_length=10)),
                ('title', models.CharField(blank=True, max_length=255)),
                ('app_name', models.CharField(blank=True, max_length=255)),
                ('version', models.CharField(blank=True, max_length=255)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('description', models.TextField(blank=True)),
                ('expected_behaviour', models.TextField(blank=True)),
                ('steps_to_reproduce', models.TextField(blank=True)),
                ('screenshots', models.ImageField(blank=True, upload_to='bug_screenshots')),
                ('is_user_submitted', models.BooleanField(default=True)),
                ('is_approved', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=False)),
                ('is_tracked', models.BooleanField(default=False)),
                ('tracked_url', models.URLField(blank=True)),
                ('punchlist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bug_punchlist', to='punchlist.punchlist')),
            ],
        ),
        migrations.AddField(
            model_name='acceptedpunchlist',
            name='punchlist',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='punchlist.punchlist'),
        ),
        migrations.AddField(
            model_name='acceptedpunchlist',
            name='punchlist_hunter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accepted_bounties_hunted', to=settings.AUTH_USER_MODEL),
        ),
    ]
